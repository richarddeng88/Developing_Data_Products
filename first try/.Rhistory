varImpPlot(rf_model)
View(train)
table(train$Pclass)
table(train$Sex)
cor(train$Pclass,train$Fare)
Plot(train$Pclass, train$Fare)
plot(train$Pclass, train$Fare)
pairs(train)
save.image("C:/Users/Richard/Desktop/Rcourse/Saved .DATA/titanic.RData")
names(train)
train$Cabin
names(train) %in% a
names(train) %in% exclude
exclude <- c("PassengerId", "Name","Cabin")
names(train) %in% exclude
training <- train[],!names(train) %in% exclude]
training <- train[,!names(train) %in% exclude]
pairs(training)
str(training)
train <- read.csv("data/titanic/train.csv")
test <- read.csv("data/titanic/test.csv")
all_data <- train
# DEAL WITH NAs
# random forest model cannot deal with data that has missing values.
# we found out that there all 177 NAs in age variable
head(all_data)
sum(is.na(all_data))
sapply(all_data, function(x) {sum(is.na(x))})
# after working on "Embarked" variable, we can see this variable become 3 levels.
all_data$Embarked[c(62, 830)] <- "S"
all_data$Embarked <- factor(all_data$Embarked)
str(all_data)
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time we use method = "anova" since we are predicting a continuous variable.
library(rpart);library(rpart.plot)
age_model <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked,
data = all_data[!is.na(all_data$Age),],
method = "anova")
rpart.plot(age_model)
all_data$Age[is.na(all_data$Age)] <- predict(age_model, all_data[is.na(all_data$Age),])
#we see there is no more NAs.
sapply(all_data, function(x) {sum(is.na(x))})
# let's work on the test set as there are NAs here
# there is a missing value in "Fare".
library(dplyr)
sapply(test, function(x) {sum(is.na(x))})
mean_fare_group <- test %>% group_by(Pclass) %>% summarize(mean(Fare, na.rm=T))
test[is.na(test$Fare),]$Fare <- mean_fare_group$`mean(Fare, na.rm = T)`[3]
# there are a lot of NAs in "Age"
test$Age[is.na(test$Age)] <- predict(age_model, test[is.na(test$Age),])
train <- all_data
str(train)
table(train$Pclass)
table(train$Sex)
cor(train$Pclass,train$Fare)
plot(train$Pclass, train$Fare)
exclude <- c("PassengerId", "Name","Cabin")
training <- train[,!names(train) %in% exclude]
training
head(training,50)
unique(train$Ticket)
str(training)
exclude <- c("PassengerId", "Name","Cabin","ticket")
training <- train[,!names(train) %in% exclude]
pairs(training)
save.image("C:/Users/Richard/Desktop/Rcourse/Saved .DATA/titanic.RData")
table(train$Pclass)
plot(train$Pclass, train$Fare)
training[order(training$Fare),]
library(dplyr)
arrange(training, desc(Fare))
a <- arrange(training, desc(Fare))
head(a,100)
library(dplyr);library(caret)
confusionMatrix(training$Pclass, training$Survived)
training %>% group_by(Pclass) %>% summarize(mean(Survived))
library(rpart);library(rattle);library(rpart.plot)
tree_model <- rpart(Survived~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked, data=train, method="class")
rpart.plot(tree_model)
fancyRpartPlot(tree_model)
rpart.plot(tree_model)
training %>% group_by(Sex) %>% summarize(mean(Survived))
View(a)
training %>% group_by(Age) %>% summarize(mean(Survived))
b <- training %>% group_by(Age) %>% summarize(mean(Survived))
print(b)
View(b)
plot(b$Age,b$`mean(Survived)`)
plot(train$Age,train$Survived)
plot(b$Age,b$`mean(Survived)`)
rpart.plot(tree_model)
varImpPlot(rf_model)
save.image("C:/Users/Richard/Desktop/Rcourse/Saved .DATA/titanic.RData")
load("C:/Users/Richard/Desktop/Rcourse/Saved .DATA/titanic.RData")
str(training)
grid <- expand.grid(.mtry=c(2,3,4,5,6,7))
rf_model <- train(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=training,
importance=T,
method="rf")
rf_pred <- predict(rf_model, test)
library(caret)
sum(is.na(training))
grid <- expand.grid(.mtry=c(2,3,4,5,6,7))
rf_model <- train(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=training,
importance=T,
method="rf")
rf_pred <- predict(rf_model, test)
solution <- data.frame(PassengerID=test$PassengerId, Survived=rf_pred)
write.csv(solution,file="kaggle/titanic/submission.csv",row.names = F)
rf_model
rf_model <- train(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=training,
importance=T,
tuneGrid =grid,
method="rf")
rf_pred <- predict(rf_model, test)
solution <- data.frame(PassengerID=test$PassengerId, Survived=rf_pred)
write.csv(solution,file="kaggle/titanic/submission.csv",row.names = F)
rf_model
qda_model <- train(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=training,
method="qda")
qda_model
qda_model <- train(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=training,
method="lda")
qda_model
qda_pred <- predict(qda_model, test)
solution <- data.frame(PassengerID=test$PassengerId, Survived=qda_pred)
write.csv(solution,file="kaggle/titanic/submission.csv",row.names = F)
# train QDA MODEL
qda_model <- train(as.factor(Survived)~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=training,
method="gbm")
qda_model
qda_pred <- predict(qda_model, test)
solution <- data.frame(PassengerID=test$PassengerId, Survived=qda_pred)
write.csv(solution,file="kaggle/titanic/submission.csv",row.names = F)
View(training)
varImpPlot(rf_model)
library(caret);library(randomForest);library(rpart.plot)
varImpPlot(rf_model)
library(caret);library(randomForest);library(rpart.plot)
varImpPlot(rf_model)
varImpPlot(rf_model$finalModel)
save.image("C:/Users/Richard/Dropbox/Saved .Data/titanic.RData")
save.image("C:/Users/Richard/Dropbox/Saved .Data/titanic.RData")
library(shiny)
# USER INTERFACE
ui <- fluidPage(
sliderInput(inputId = "slide",               # input name for internal use
label="choose a number",         # label to display
value=300, min=1, max=1000),     # input specific argument
numericInput(inputId = "number",
label = "type a number",
value=70, min=1,max=150),
passwordInput(inputId = "PW",
label = "type your password"),
# to display an output, add it here with an output function
plotOutput(outputId = "hist")
)
# SERVER CODE  - use the server function to assemble inputs to outputs
# Follow 3 rules: 1. save the output that you build to output$
# 2. build the output with a render() function
# 3. access input values with input$
server <- function(input, output) {
output$hist <- renderPlot({
plot(rnorm(input$num,0,1),pch=20)
#hist(iris$Sepal.Length)
a})
}
# APPRUN()
shinyApp(ui=ui, server=server)
library(shiny)
# USER INTERFACE
ui <- fluidPage(
sliderInput(inputId = "slide",               # input name for internal use
label="choose a number",         # label to display
value=300, min=1, max=1000),     # input specific argument
numericInput(inputId = "number",
label = "type a number",
value=70, min=1,max=150),
passwordInput(inputId = "PW",
label = "type your password"),
# to display an output, add it here with an output function
plotOutput(outputId = "hist")
)
# SERVER CODE  - use the server function to assemble inputs to outputs
# Follow 3 rules: 1. save the output that you build to output$
# 2. build the output with a render() function
# 3. access input values with input$
server <- function(input, output) {
output$hist <- renderPlot({
plot(rnorm(input$slider,0,1),pch=20)
#hist(iris$Sepal.Length)
a})
}
# APPRUN()
shinyApp(ui=ui, server=server)
library(shiny)
# USER INTERFACE
ui <- fluidPage(
sliderInput(inputId = "slider",               # input name for internal use
label="choose a number",         # label to display
value=300, min=1, max=1000),     # input specific argument
numericInput(inputId = "number",
label = "type a number",
value=70, min=1,max=150),
passwordInput(inputId = "PW",
label = "type your password"),
# to display an output, add it here with an output function
plotOutput(outputId = "hist")
)
# SERVER CODE  - use the server function to assemble inputs to outputs
# Follow 3 rules: 1. save the output that you build to output$
# 2. build the output with a render() function
# 3. access input values with input$
server <- function(input, output) {
output$hist <- renderPlot({
plot(rnorm(input$slider,0,1),pch=20)
#hist(iris$Sepal.Length)
a})
}
# APPRUN()
shinyApp(ui=ui, server=server)
require(devtools)
install.packages("devtools")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Sex', data = hair_eye, type = 'bar')
library(plotly)
install.packages("plotly")
library(plotly)
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
m <- gvisMotionChart(Fruits, "Fruit","Year", options=list(width=600, height=400))
print(m, "chart")
head(Fruits)
suppressPackageStartupMessages(library(googleVis))
m <- gvisMotionChart(Fruits, "Fruit","Year", options=list(width=600, height=400))
m
print(m, "chart")
print(m, "chart")
print(m, "chart")
print(m, "chart")
g <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit",
options = list(width=600, height=400))
print(G, "chart")
print(g, "chart")
source('C:/Users/Richard/Desktop/Rcourse/Developing_Data_Products/googlevis.R')
suppressPackageStartupMessages(library(googleVis))
m <- gvisMotionChart(Fruits, "Fruit","Year", options = list(width=600, height=400))
print(m, "chart")
g <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit",
options = list(width=600, height=400))
print(g, "chart")
print(m)
print(m)
print(m, "chart")
demo(googleVis)
library(UsingR);data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
install.packages("manipulate")
library(UsingR);data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(UsingR);data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(quantmod)
library(copula)   # for copula functions
library(fGarch)   # need for standardized t density
library(MASS)     # need for fitdistr and kde2d
library(fCopulae) # additional copula functions
library(quantmod)
library(xts)
library(timeDate)
load("C:/Users/Richard/Dropbox/Saved .Data/Fin Stats project.RData")
meanRet <- mean(apply(dat, 2, mean))
sdRet <- sqrt(sum(cov(dat)/400))
invest = 1000000
VaR_5perc <- invest*(-meanRet+1.645*sdRet)
ES5_per <- invest*(-meanRet+0.103*sdRet/0.05)
VaR_5perc
ES5_per
meanRet
head(dat)
SPcompany = read.table("data/finance_stats/SP500 companies.csv", header=T, sep=",")
colnames(SPcompany)
table(SPcompany[,"GICSector"])
stocklist = c('AMZN',  'COH',  'EXPE',  'MCD'   ,'NKE'  ,'RL'  ,'CCE', 'PEP',  'AXP',
'AIG',  'BLK','COF','GS','JPM','MCO', 'WFC',  'FDX'  ,'MMM','AAPL','FB')
par(mfrow=c(4,5))
for (i in stocklist) {
x = get(getSymbols(i, src = 'yahoo', from = '2014-12-04', adjust=TRUE))
xr = dailyReturn(x, type = "log")
#plot(xr, main=i)
#plot(x[,4],main=i)
assign(i, xr)
}
for (i in stocklist) {
x = get(getSymbols(i, src = 'yahoo', from = '2014-12-04', adjust=TRUE))
xr = dailyReturn(x, type = "log")
#plot(xr, main=i)
#plot(x[,4],main=i)
assign(i, xr)
}
dat <- cbind(AMZN,  COH,  EXPE, MCD ,NKE ,RL ,CCE, PEP, AXP,
AIG, BLK,COF,GS,JPM,MCO, WFC, FDX ,MMM,AAPL,FB)
dat <- as.data.frame(dat)
names(dat) <- stocklist
head(dat)
library(MASS)
est_mean <- apply(dat,2, function(x){as.numeric(fitdistr(x,"normal")$estimate)[1]})
est_sd <-  apply(dat,2, function(x){as.numeric(fitdistr(x,"normal")$estimate)[2]})
data1 <- matrix(0,dim(dat)[1],20)
for (i in 1:20){
data1[,i] <- pnorm(dat[,i], mean=est_mean[i], sd=est_sd[i])
}
# transformed histgram compared to the original one
par(mfrow=c(1,2))
#hist(dat[,1], main="original daily returns",breaks=15,xlab='PPG')
hist(data1[,1],main="Normal transformed returns",breaks=15,xlab='PPG')
hist(data1[,2],main="Normal transformed returns",breaks=15,xlab='STZ')
# transfored data histgram
for (i in 1:20)
{
hist(dat[,i], xlab="ori data",main = stocklist[i])
}
fnorm = fitCopula(data=data1[,1:20],
method = "itau", optim.method="BFGS", # use Kendall tau method
copula=normalCopula(dim=20, dispstr="un"))
mean1 <- apply(dat,2, mean)
sd1 <- apply(dat,2,sd)
list <-   list(list(mean= mean1[1],sd=sd1[1]),
list(mean= mean1[2], sd=sd1[2]),
list(mean= mean1[3], sd=sd1[3]),
list(mean= mean1[4], sd=sd1[4]),
list(mean= mean1[5], sd=sd1[5]),
list(mean= mean1[6], sd=sd1[6]),
list(mean= mean1[7], sd=sd1[7]),
list(mean= mean1[8], sd=sd1[8]),
list(mean= mean1[9], sd=sd1[9]),
list(mean= mean1[10], sd=sd1[10]),
list(mean= mean1[11], sd=sd1[11]),
list(mean= mean1[12], sd=sd1[12]),
list(mean= mean1[13], sd=sd1[13]),
list(mean= mean1[14], sd=sd1[14]),
list(mean= mean1[15], sd=sd1[15]),
list(mean= mean1[16], sd=sd1[16]),
list(mean= mean1[17], sd=sd1[17]),
list(mean= mean1[18], sd=sd1[18]),
list(mean= mean1[19], sd=sd1[19]),
list(mean= mean1[20], sd=sd1[20]))
# build model
mvdc_norm <- mvdc(copula = normalCopula(coef(fnorm),dim=20,dispstr="un"), rep("norm", 20), list)
set.seed(2015)
number=10000
rand_mvdc <- rMvdc(n=number, mvdc=mvdc_norm)
#pairs(rand_mvdc)
# simulated data histgram
for (i in 1:20)
{
hist(rand_mvdc[,i], main = stocklist[i])
}
# Estimation of VaR and ES based on the simulation data -  we assume an equally weighted portfolio of 20 stocks
meanRet <- apply(rand_mvdc, 1, mean)
x <- meanRet[order(meanRet)]
# assuem we invest $1000,000, what is the Var and ES
invest = 1000000
VaR_5perc_simulation <- -invest*x[number*0.05]
ES_5prc_simulation <- -invest*(mean(x[1:number*0.05]))
VaR_5perc_simulation
ES_5prc_simulation
meanRet <- mean(apply(dat, 2, mean))
sdRet <- sqrt(sum(cov(dat)/400))
invest = 1000000
VaR_5perc <- invest*(-meanRet+1.645*sdRet)
ES5_per <- invest*(-meanRet+0.103*sdRet/0.05)
meanRet
VaR_5perc
ES5_per
0.103*sdRet/0.05
(-meanRet+1.645*sdRet)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
manipulate(plot(1:x,rnorm(x),pch=20), x = slider(1,100))
library(UsingR);data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
par(mfrow=c(1,1))
library(manipulate)
manipulate(plot(1:x,rnorm(x),pch=20), x = slider(1,100))
library(UsingR);data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
manipulate(plot(1:x,rnorm(x),pch=20), x = slider(1,100))
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
abline(0, s)
s=5
abline(0, s)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.05))
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
suppressPackageStartupMessages(library(googleVis))
m <- gvisMotionChart(Fruits, "Fruit","Year", options = list(width=600, height=400))
print(m, "chart")
# install.packages("plotly")
library(plotly)
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
?plot_ly
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
head(diamonds)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(plotly);library(ggplot2)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
gg <- ggplotly(p)
plot_ly(z = volcano, type = "surface")
head(volcano)
class(volcano)
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
plotly_POST(p, filename = "r-docs/midwest-boxplots", world_readable=TRUE)
help(signup, package = 'plotly')
Sys.setenv("plotly_username"="richarddeng88")
Sys.setenv("plotly_api_key"="cqs8spryhx")
plotly_POST(p, filename = "r-docs/midwest-boxplots", world_readable=TRUE)
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
library(slidify)
author("first try")
slidify("index.Rmd")
browseURL("index.html")
Qualitative acitivity reconition
